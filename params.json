{"name":"Circuitbox","tagline":"A dependency-injection framework for node.js","body":"# circuitbox\r\n\r\nA dependency-injection framework for node.js\r\n\r\n[![Stories in Ready](https://badge.waffle.io/oddjobsman/circuitbox.png?label=ready)](https://waffle.io/oddjobsman/circuitbox)\r\n[![build status](https://secure.travis-ci.org/oddjobsman/circuitbox.png)](http://travis-ci.org/oddjobsman/circuitbox)\r\n[![dependency status](https://david-dm.org/oddjobsman/circuitbox.png)](https://david-dm.org/oddjobsman/circuitbox)\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/oddjobsman/circuitbox/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n[![status](https://sourcegraph.com/api/repos/github.com/oddjobsman/circuitbox/badges/status.png)](https://sourcegraph.com/github.com/oddjobsman/circuitbox)\r\n\r\n## Objectives\r\n\r\n1. Make wiring up of dependent components simple and easy and manageable\r\n2. Write testable units of code without worrying about their wiring up\r\n3. Provide a robust platform to write large-scale node.js applications.\r\n\r\n## Installation\r\n\r\nThis module can be installed via npm:\r\n\r\n``` bash\r\n$ npm install --save circuitbox\r\n```\r\n\r\n## Example Usage\r\n\r\n``` js\r\nmodule.circuitbox = require('circuitbox');\r\nvar cb = circuitbox.create({\r\n    modules: ['config/commonModule', 'config/webModule']\r\n});\r\n```\r\n\r\n``` js\r\nmodule.exports = function CreditCardProcessor (processor, transactionLog) {\r\n\tthis.chargeOrder = function (order, creditCard) {\r\n\t\tvar tx = processor.processTransaction(creditCard, order.amount);\r\n\t\ttransactionLog.recordPayment(tx);\r\n\t};\r\n};\r\n```\r\n### Components\r\n\r\nComponents are objects which provide a service. They usually collaborate with other components that provide other required services. circuitbox prescribes a specific convention with which you can author your components. This conventions helps the component recieve the required dependencies. Below is an example of a component:\r\n\r\n\r\n``` js\r\nmodule.exports = function CreditCardProcessor (processor, transactionLog) {\r\n\tthis.chargeOrder = function (order, creditCard) {\r\n\t\tvar tx = processor.processTransaction(creditCard, order.amount);\r\n\t\ttransactionLog.recordPayment(tx);\r\n\t};\r\n};\r\n```\r\n\r\n### Basic Example\r\n\r\nAssuming there is a file named `consoleMessagePrinter.js` in the same folder with the code:\r\n\r\n``` js\r\n(function () {\r\n  'use strict';\r\n\r\n  // Our console message printer\r\n  // deps is injected by circuitbox with the dependencies\r\n  function ConsoleMessagePrinter(deps) {\r\n    return {\r\n      print: function () {\r\n        console.log(deps.messageSource.message());\r\n      }\r\n    };\r\n  }\r\n\r\n  module.exports = ConsoleMessagePrinter;\r\n})();\r\n```\r\n\r\nAnd in our `main.js` file we have code as:\r\n\r\n``` js\r\n(function () {\r\n  'use strict';\r\n\r\n  // our simple message source\r\n  // deps is injected by circuitbox with the dependencies\r\n  var simpleMessageSource = function (deps) {\r\n    return {\r\n      message: function () {\r\n        return deps.message;\r\n      }\r\n    };\r\n  };\r\n\r\n  // require circuitbox\r\n  var circuitbox = require('circuitbox');\r\n\r\n  // create a circuitbox\r\n  circuitbox.create({\r\n    modules: [\r\n      function (registry) {\r\n        // the message to be used\r\n        registry.for('message').use('This is the message');\r\n\r\n        // define the message source\r\n        registry.for('messageSource').use(simpleMessageSource)\r\n          .dependsOn('message').scope('singleton');\r\n\r\n        // define the message printer - does a module.require internally\r\n        registry.for('messagePrinter').requires('./consoleMessagePrinter')\r\n          .dependsOn('messageSource').scope('singleton');\r\n      }\r\n    ]\r\n  }).then(function (cbx) {\r\n    // get the message printer and print a message\r\n    cbx.get('messagePrinter').then(function (printer) {\r\n      printer.print();\r\n    }).fail(function (err) {\r\n      console.log('Could not recieve a printer');\r\n      return;\r\n    });\r\n  }).fail(function (err) {\r\n    console.log('Could not create circuitbox');\r\n  });\r\n\r\n})();\r\n```\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Follow the [coding conventions](Coding-Conventions)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request","google":"UA-46745536-1","note":"Don't delete this file! It's used internally to help with page regeneration."}